// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Statestore subscriber and service interface definitions.  See
// common/thrift/StatestoreService.thrift for complementary Thrift data structures.

package impala;

import "rpc/common.proto";

service StatestoreSubscriber {
  // Called when the statestore sends a topic update. The request contains a map of topic
  // names to TTopicDelta updates, sent from the statestore to the subscriber. Each of
  // these delta updates will contain a list of additions to the topic and a list of
  // deletions from the topic. In response, the subscriber returns an aggregated list of
  // updates to topic(s) to the statestore. Each update is a TTopicDelta that contains a
  // list of additions to the topic and a list of deletions from the topic. Additionally,
  // if a subscriber has received an unexpected delta update version range, they can
  // request a new delta update based off a specific version from the statestore. The next
  // statestore delta update will be based off of the version the subscriber requested.
  rpc UpdateState(ThriftWrapperPb) returns (ThriftWrapperPb);

  // Called when the statestore sends a heartbeat.
  rpc Heartbeat(ThriftWrapperPb) returns (ThriftWrapperPb);
}

service StatestoreService {
  // Register a single subscriber. Note that after a subscriber is registered, no new
  // topics may be added.
  rpc RegisterSubscriber(ThriftWrapperPb) returns (ThriftWrapperPb);
}
